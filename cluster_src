# ALIASES

# show slot counts
alias qslots='qstat -g c'
#TODO deprecated?
alias qerr='qstat -qs E -f -explain E | awk "/^---*$/ { print \"\"; next} /^queuename/ { print \"\$1, \$6, error job node\"; next } /^[^ ]*@/ { node_info=\"$1 - $6\"; next } { print node_info $0 }" | sed "s/\.ihme\.wash.[^ ]*//g; s/\t*queue [^ ]* marked / - /; s/ as result of / - /; s/.s failure at host / - on /"'
#TODO what does this do?
alias qqlogins='qstat -u \* | egrep "(QLOGIN|qlogins@)" | sort -k4 | awk "{ if (\$9 >= 10 && \$5 == \"r\") printf \"%d %-8s %10s %8s %s %d\n\", \$1, \$4, \$6, \$7, \$8, \$9, \$NF}"'
# redirect qconf help to STDOUT and grep for the arg
alias qwhat='qconf -help 2>&1 | grep'
# print node names and slot info in CSV format
alias qnslots='qstat -f | grep @ | awk -F"(@| *)" "{printf \"%s,%3s\n\", gensub(\"\\\..*\",\"\",\"\",\$2), gensub(\"/\",\",\",\"g\",\$4)}"'

# FUNCTIONS

#check for running jobs on a node
function qhjobs () {
    local func_name=${FUNCNAME[0]}

    if (( $# > 1 )); then
        echo "Usage: $func_name [HOSTNAME] (default: current host)"
        return 1
    fi

    if (( $# == 0 )); then
        node=`hostname -s`
    else
        node=$1
    fi

    qhost -j -h $node |
    awk 'NR <= 4 { print "   " $0}      # indent the first 4 lines
            NR == 4 { print "" }        # print a blank line
            NR > 4 && NR <= 6 { print } # just print lines 5 - 6
            NR > 6 {
                # lines with more than 9 columns are array tasks
                if ( NF > 9 )
                    { print gensub(/^   /, "  A", $0) }
                else
                    { print } }' |
    # the grep highlights array tasks based on a different test to hopefully
    # make it more reliable or at least fail loud
    egrep -e '$' -e '.* [0-9]+$'           # ends in numeral, it's an array task

}

#list all nodes restricted to projects
function qordons () {
    local node
    local used_slots
    local total_slots
    local qconf_output

    for line in $(qstat -f | grep '@' | awk -F'(@| *)' '{printf "%3s,%s\n", gensub("/",",","g",$4), gensub("\\..*","","",$2)}'); do
        node=`echo $line | cut -d, -f4`
        reserved_slots=`echo $line | cut -d, -f1`
        used_slots=`echo $line | cut -d, -f2`
        total_slots=`echo $line | cut -d, -f3`
        #TODO why is it only doing proj_*?
        qconf_output=`qconf -se $node | grep '^projects *proj' | tr -s ' ' | sed 's/^projects //'`
        if [[ -n $qconf_output ]]; then
            printf "%3s/%3s %-12s %s\n" $used_slots $total_slots $node "$qconf_output"
        fi
    # sort by project and highlight full nodes
    done | sort -n -k3,2 | egrep -e '$' -e '\<([0-9]+)/ {,2}\1\>.*'
}

#show queues (nodes) in bad states with UGE's messages
function qexplain () {
    # ignores a list of queues unless -v is specified

    # states to explain
    local TO_EXPLAIN='aAcEm'

    # queues to ignore
    local EXCLUDE_QUEUES='test.q geospatial-test.q'

    local qstat_explain

    if [[ $1 == "-v" ]]; then
        # grab it all
        qstat_explain=$(qstat -f -explain $TO_EXPLAIN)
    else
        # assemble an UGE wildcard string to exclude queues
        local queue_wildcard=$(echo "$EXCLUDE_QUEUES" |
                                sed 's/.*/!(&)/' |
                                tr ' ' '|')
        # exclude some queues
        qstat_explain=$(qstat -f -q "$queue_wildcard" -explain $TO_EXPLAIN)
    fi

    echo "$qstat_explain" |
    uniq |
    # grab lines with colons and line before them
    # this will grab multiple message lines
    egrep --no-group-separator -B1 ':' |
    awk '/^[^\t]/ { print $1, $6; next } { print }' |
    # make admin msgs stand out
    egrep -e '$' -e '.*admin msg:.*'
}

#show all bad nodes
function qbad () {
    # ignores a list of queues unless -v is specified

    # queues to ignore
    local EXCLUDE_QUEUES='test.q geospatial-test.q'
    # all UGE states
    local ALL_STATES='acdosuACDES'

    local qstat_output

    if [[ $1 == "-v" ]]; then
        # grab it all
        qstat_output=$(qstat -f)
    else
        # assemble an UGE wildcard string to exclude queues
        local queue_wildcard=$(echo "$EXCLUDE_QUEUES" |
                                sed 's/.*/!(&)/' |
                                tr ' ' '|')
        # exclude some queues
        qstat_output=$(qstat -f -q "$queue_wildcard")
    fi

    echo "$qstat_output" |
    # show only nodes with something in the last column
    awk "{if (NF > 5) print}" |
    # highlight the node we're on and any states which include a "d"
    # (can't highlight only the "d" because egrep has no lookahead)
    egrep -e '$' -e ".*$(hostname -s).*" -e "[${ALL_STATES}]*d[${ALL_STATES}]*$"
}

# disable a cluster node cleanly
function d-node () {
    # Disable all the queue instances on a cluster node
    #   - Must be run on an admin host
    #   - Requires admin privileges for the targeted queue(s)
    #
    #   - defaults to current host as the target node
    #   - tag the node with a message
    #   - timestamps and signs the message
    #   - shows result of the change

    local func_name=${FUNCNAME[0]}

    # try to check whether this is a cluster node
    if ! which qmod > /dev/null; then
        echo "$func_name: no 'qmod' in path. Is this a cluster node?"
        return 10
    fi

    # try to determine the actual user
    user=`who am i | cut -d' ' -f1`

    # if logged in as root, prompt for a username to put in the message
    if [[ $user == "root" ]]; then
        read -p "Running as root. Please provide your username: " user
    fi

    # confirm we have a valid username
    if ! getent passwd $user > /dev/null; then
        echo "Invalid username: $user"
        return 11
    fi

    # check the first argument
    if getent hosts $1 > /dev/null; then
        # if it's a hostname, use it as the node
        local node=$1
        # remove the first argument
        shift
    else
        # if it's not a hostname, use the current host as the node
        local node=$(hostname -s)
    fi

    # need at least one argument: a message
    if (( $# == 0 )); then
        echo "Usage: $func_name [node_name] <message>"
        echo
        echo "  node_name  optional (default: current host)"
        echo "  message    reason for disabling"
        echo
        echo "Disables all queue instance on a node"
        echo "(Overwrites existing messages on nodes)"
        return 1
    fi

    # the rest of the arguments are the message
    local timestamp=$(date +'%D %T')
    local message="$user: $@ ($timestamp)"

    # disable the node with the message
    qmod -d "*@$node" -msg "$message"
    echo
    # from "line with node" until "line with dashes" print "lines without dashes"
    # because we don't want to print the trailing line of dashes
    qstat -f -explain m |
    awk -v node=$node '$1 ~ node, /^---/ {if ($0 !~ "^---") {print}}' |
    # highlight output to match qexplain
    egrep -e '$' -e 'admin msg:'
}

#show idle logins
#find all job IDs in the qlogins@ queue and find ones that are not using any memory
#TODO add CPU time
#TODO This is NOT reliable in confirming that they are actually idle
function qidle () {
    for job in `qstat -u \* | grep 'qlogins@' | awk '{ print $1 }'`; do
        qstat -j $job
    done | awk '/^job_number/ { job=$NF; slots=1} /^owner/ { user=$NF } /^parallel environment/ { slots=$NF } /^exec_host_list/ { FS="," } /^usage/ { if ( $3 == " mem=0.00000 GBs") { printf "%-10d %3d %-8s %-10s %-15s\n", job, slots, user, $2, $5} FS=" "}'
}

#check if a cluster node is configured with correct host types
function qnode_check () {
    local func_name=${FUNCNAME[0]}

    if (( $# > 1 )); then
        echo "Usage: $func_name [HOSTNAME] (default: current host)"
        return 1
    fi

    local node

    if (( $# == 0 )); then
        node=`hostname -s`
    else
        node=$1
    fi

    #TODO check other queues and hostgroups
    local QUEUE="all.q"
    local HOST_GROUP="@allhosts"

    local admin=`qconf -sh | grep $node`
    local exec=`qconf -sel | grep $node`
    local submit=`qconf -ss | grep $node`
    local host_grp=`qconf -shgrp $HOST_GROUP | grep $node | sed 's/^ *//'`
    local queue=`qconf -sq $QUEUE | grep $node`

    printf "%-12s: %s\n" "admin host" $admin
    printf "%-12s: %s\n" "exec host" $exec
    printf "%-12s: %s\n" "submit host" $submit
    printf "%-12s: %s\n" "$HOST_GROUP" "$host_grp"
    printf "%-12s: %s\n" "$QUEUE" $queue
}

function qproj_probe () {
    # This only greps for a substring. It does not look up RQS and UL
    # based on the project configuration
    local func_name=${FUNCNAME[0]}

    if (( $# != 1 )); then
        echo "Usage: $func_name <string>"
        return 1
    fi

    local sub_string=$1

    echo "Projects matching '$sub_string'"
    echo "---------------------------------------------------"
    # list matching projects
    for proj in `qconf -sprjl | grep -i $sub_string`; do
        qconf -sprj $proj
        echo
    done |
    # grep out "default" values to shorten output
    egrep -v '((fshare|oticket) *0$|xacl *NONE$)'

    echo "User Lists matching '$sub_string'"
    echo "---------------------------------------------------"
    # list matching user lists
    for user_list in `qconf -sul | grep -i $sub_string`; do
        qconf -su $user_list
        echo
    done |
    egrep -v '((fshare|oticket) *0$|xacl *NONE$|type *ACL$)'

    echo "Resource Quota Sets matching '$sub_string'"
    echo "---------------------------------------------------"
    # list matching resource quota sets
    for resource_quota in `qconf -srqsl | grep -i $sub_string`; do
        qconf -srqs $resource_quota
        echo
    done |
    egrep -v '(enabled *TRUE$|{|})' |
    sed 's/^ *//'
}

# print hostgroup as one node per line
function qdump_hgrp () {
    local func_name=${FUNCNAME[0]}

    if (( $# != 1 )); then
        echo "Usage: $func_name <@hostgroup>"
        return 1
    fi

    #TODO would be nice to add the @ if it's missing
    local hgrp=$1

    qconf -shgrp "$hgrp" |
    tr -s ' \\' '\n' |
    tail -n +4
}

# enable a cluster node cleanly
function e-node () {
    # Enable all the queue instances on a cluster node
    #   - Must be run on an admin host
    #   - Requires admin privileges for the targeted queue(s)
    #
    #   - defaults to current host as the target node
    #   - immediately runs sanity-check

    local SANITY_CHECK='/usr/local/bin/sanity_check.sh'

    if ! [[ -f $SANITY_CHECK ]]; then
        echo "Can't find sanity_check: $SANITY_CHECK"
        return 3
    fi

    # qmod output to check to determine whether the
    # node changed status and sanity_check should run
    local QMOD_ALREADY='is already in the specified state: enabled'

    local func_name=${FUNCNAME[0]}

    # try to check whether this is a cluster node
    if ! which qmod > /dev/null; then
        echo "$func_name: no 'qmod' in path. Is this a cluster node?"
        return 10
    fi

    # try to determine the actual user
    user=`who am i | cut -d' ' -f1`

    # if logged in as root, prompt for a username to put in the message
    if [[ $user == "root" ]]; then
        echo "Please use your admin account for this."
        return 1
    fi

    # check the first argument
    if (( $# == 1 )); then
        local node=$1
    elif (( $# == 0 )); then
        #use the current host as the node
        local node=$(hostname -s)
    else
        echo "Usage: $func_name [node_name]"
        echo
        echo "  node_name  optional (default: current host)"
        echo
        echo "Enables all queue instance on a node and"
        echo "runs sanity_check"
        return 1
    fi

    # enable the node with the message
    # validate sudo before qmod so we don't wait between
    # qmod and sanity_check
    local output
    sudo -v && output=$(qmod -e "*@$node")

    if [[ $output =~ $QMOD_ALREADY ]]; then
        echo $output
        echo
        echo "Skipping sanity check"
    else
        sudo "$SANITY_CHECK"
        # print current state of the node
        echo
        qstat -f | grep `hostname -s`
    fi
}
